{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","placeholder","value","type","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GitExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","GifExpertApp","document","getElementById"],"mappings":"mMAwCeA,EArCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,eAAC,WAAD,WACI,8CAEA,sBAAMC,SAbO,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAe,MAQf,SACI,uBACIO,YAAY,0BACZC,MAAQT,EACRU,KAAK,OACLC,SAtBU,SAAER,GACxBF,EAAeE,EAAES,OAAOH,gB,+BCPnBI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCIPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAClC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCDJO,EAAU,SAAC,GAAmB,IAAhBnB,EAAe,EAAfA,SAEvB,ECLwB,SAAEA,GAC1B,MAA0Bf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAU,CACNf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEGqB,EDb0BK,CAAc1B,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAStB,OACI,eAAC,WAAD,WACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,6BAEb,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAAEC,GAAF,OAER,aADA,CACC,EAAD,eAEKA,GADCA,EAAIC,aEQfgB,EAhCO,WAElB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAMA,OACI,eAAC,WAAD,WACI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBAEA,6BAGO4C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEKA,SAAWA,GADLA,YCdnB6B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCCdO,IAASC,OAEL,cAACC,EAAD,IACAC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.2ff3f1ae.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ( {setCategories} ) => {\r\n    const [inputValue, setInputValue] = useState(''); \r\n    \r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n    \r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [inputValue, ...cats] );\r\n            setInputValue( '' );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Add Category</h2>\r\n            \r\n            <form onSubmit={ handleSubmit }>\r\n                <input \r\n                    placeholder='Ingrese nueva categoria'\r\n                    value={ inputValue }\r\n                    type='text'\r\n                    onChange={ handleInputChange }\r\n                />\r\n            </form>\r\n            \r\n        </Fragment>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddCategory\r\n","export const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=xDwoC4CUBxU1YXrY90ZvorNGNfEA2SNA`;\r\n\r\n    //LLAMAR ENDPOINT\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    //Extraer informacion\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url //Si trae imagen se almacena en variable, coso contrario NO\r\n        }\r\n    });\r\n    //console.log(gifs);\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\n\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={ url } alt={ title} />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","//import React, { Fragment, useEffect, useState } from 'react'\r\nimport React, { Fragment } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n//import { getGifs } from '../helpers/getGifs.js';\r\n\r\nexport const GifGrid = ( { category }) => {\r\n\r\n    const { data: images, loading } =useFetchGifs( category );\r\n\r\n//    const [images, setImages] = useState( [] );\r\n\r\n//     useEffect( () => {\r\n//         getGifs( category )\r\n//             .then( setImages );\r\n//     }, [ category ])\r\n\r\n    return (\r\n        <Fragment>\r\n            <h3 className='animate__animated animate__bounce'>{ category }</h3>\r\n\r\n            { loading && <p className='animate__animated animate__flash'>Cargando . . . </p>}\r\n\r\n            <div className='card-grid'>\r\n            {\r\n                images.map( ( img ) => (\r\n                    //<li key={ id }>{ title }</li>\r\n                    <GifGridItem\r\n                    key={ img.id }\r\n                    { ...img }\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n        </Fragment>\r\n    )\r\n}\r\n","//      CUSTOM HOOK\r\nimport { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setState( {\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            });\r\n\r\n    }, [category] );\r\n\r\n    return state;   // { data: [], loading: true };\r\n};","import React, { Fragment, useState } from \"react\"\r\n\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GitExpertApp =  () => {\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball', 'One Piece']\r\n    const [categories, setCategories] = useState(['One Piece'])\r\n    \r\n    // const handleAdd = () => {\r\n    //     setCategories( [...categories, 'Hunter X Hunter'] );\r\n    // };\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>GifExpertApp</h2>\r\n\r\n            <AddCategory setCategories={setCategories}/>\r\n\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                   // categories.map( category => <li key={ category }>{ category }</li> )\r\n                   categories.map( category =>\r\n                       <GifGrid \r\n                            key={ category }\r\n                            category={ category }\r\n                        /> \r\n                    )\r\n                }\r\n            </ol>\r\n            \r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default GitExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}